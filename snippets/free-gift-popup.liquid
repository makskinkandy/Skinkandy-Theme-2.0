<!-- FREE GIFT POPUP SECTION -->
  {% assign skus = settings.variant_sku | split: "," %}
  <div id="free-gift-popup">
    <div class="free-gift-popup__wrapper">
      <h3><strong>You've unlocked a free gift!</strong></h3>
      <p>Choose one of the gifts below:</p>
      <div id="gift-options" class="gift-wrapper">
        {% for product in settings.free-gift %}
          {% assign image_url = product.featured_image | image_url: width: 400 %}
          <div class="gift-item">
            {% if product.variants.size > 1 %}
                {% assign selected = false %}
                {% for variant in product.variants %}
                  {% assign trimmed_sku = variant.sku | strip %}
                  {% if skus contains trimmed_sku %}
                      <img src="{{ variant.image | image_url: width: 400 }}" alt="{{ product.title }}" class="gift-variant-image">
                  {% endif %}
                {% endfor %}
            {% else %}
              <img src="{{ image_url }}" alt="{{ product.title }}">
            {% endif %}
            <p>{{ product.title }}</p>
      
            {% if product.variants.size > 1 %}
              <select class="gift-variant-selector">
                {% assign selected = false %}

                {% for variant in product.variants %}
                  {% assign trimmed_sku = variant.sku | strip %}
                  
                  {% if skus contains trimmed_sku %}
                    <option 
                        data-image="{{ variant.image | image_url: width: 400  }}"
                        value="{{ variant.id }}" 
                        {% unless variant.available %}disabled{% endunless %}
                        {% if variant.available and selected == false %}
                          selected
                          {% assign selected = true %}
                        {% endif %}
                      >
                        {{ variant.title }}{% unless variant.available %} — Out of stock{% endunless %}
                      </option>
                  {% endif %}
                {% endfor %}
                
              </select>
            {% else %}
              <input type="hidden" class="gift-variant-selector" value="{{ product.variants.first.id }}">
            {% endif %}
      
            <button class="gift-btn btn btn--primary add-to-cart"
              data-title="{{ product.title | escape }}"
              data-image="{{ image_url }}">
              Pick me
            </button>
          </div>
        
        {% endfor %}
      </div>
      <button id="close-popup">X</button>
    </div>
  </div>
  
  <style>
    .gift-variant-selector option[disabled] {
      color: #aaa;
    }
  </style>
  
  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {

      function bindGiftVariantSelectors() {
        document.querySelectorAll(".gift-variant-selector").forEach(function (selectBox) {
          if (selectBox.dataset.bound === "true") return; // prevent double-binding
          selectBox.dataset.bound = "true";

          selectBox.addEventListener("change", function () {
            const selectedOption = this.options[this.selectedIndex];
            const imageUrl = selectedOption.dataset.image;
            const wrapper = this.closest(".gift-item");
            const imageEl = wrapper.querySelector(".gift-variant-image");

            if (imageEl && imageUrl) {
              imageEl.src = imageUrl;
            }
          });
        });
      }
      
      function initSlickSlider() {
        const slider = document.querySelector('.gift-wrapper');
        if (window.innerWidth <= 768) {

          if (!slider.classList.contains('slick-initialized')) {
            $(slider).slick({
              slidesToShow: 1,
              slidesToScroll: 1,
              autoplay: true,
              autoplaySpeed: 2000,
              variableWidth: true,
              dots: false,
              infinite: true
            });
            $(slider).on('init afterChange', function () {
              bindGiftVariantSelectors();
            });
          }
        } else {
          if (slider.classList.contains('slick-initialized')) {
            $(slider).slick('unslick');
          }
        }
      }
  
      initSlickSlider();
      bindGiftVariantSelectors();

      window.addEventListener('resize', function () {
        initSlickSlider();
      });
    });
  </script>

  {% assign discount_code = "SKAFTERPAY25" %}
  {% assign gift_code = "KandyClubAfterPay" %}

  {% assign matched_variant_ids = "" %}

  {% for product in settings.free-gift %}
    {% for variant in product.variants %}
      {% assign trimmed_sku = variant.sku | strip %}
      {% if skus contains trimmed_sku %}
        {% assign matched_variant_ids = matched_variant_ids | append: variant.id | append: "," %}
      {% endif %}
    {% endfor %}
  {% endfor %}

  {% assign variant_id_array = matched_variant_ids | split: "," | uniq %}
  
  <script>
  document.addEventListener("DOMContentLoaded", function () {
    const giftVariantIds = [
      {% for id in variant_id_array %}
        {% unless id == "" %}{{ id }},{% endunless %}
      {% endfor %}
    ].filter(Boolean).map(v => parseInt(v, 10));

    const giftCode = "{{ gift_code }}"; // liquid variable
    const popup = document.getElementById("free-gift-popup");
    const root = (window.Shopify && window.Shopify.routes && window.Shopify.routes.root) || "/";

    // ---------- UI helpers ----------
    function showPopup() { popup && popup.classList.add("show"); }
    function hidePopup() { popup && popup.classList.remove("show"); }

    function disableAllButtons(message = "Gift Added") {
      document.querySelectorAll(".gift-btn").forEach(btn => {
        btn.disabled = true; btn.textContent = message; btn.style.opacity = "0.6";
      });
    }

    function enableAllButtons(message = "Pick me") {
      document.querySelectorAll(".gift-btn").forEach(btn => {
        btn.disabled = false; btn.textContent = message; btn.style.opacity = "1";
      });
    }

    // ---------- Cart helpers ----------
    function getCartFresh() {
      return fetch(`${root}cart.js?t=${Date.now()}`, { cache: "no-store" }).then(r => r.json());
    }

    function cartUpdate(payload) {
      return fetch(`${root}cart/update.js`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      }).then(r => r.json());
    }

    function removeGiftLines(cart) {
      const gifts = cart.items.filter(item => {
        const isGiftVariant = giftVariantIds.includes(parseInt(item.variant_id, 10));
        const hasGiftProp = item.properties && item.properties.source === "Free Gift Promo";
        return isGiftVariant || hasGiftProp;
      });

      if (!gifts.length) return Promise.resolve();

      return Promise.all(gifts.map(item => {
        return fetch(`${root}cart/change.js`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id: item.key, quantity: 0 })
        });
      })).then(() => {});
    }

    // Remove BOTH: gift products + discount, whenever not on checkout
    async function purgeGiftsAndDiscountIfNotCheckout() {
      if (location.pathname.includes("/checkout")) return;

      try {
        // 1) Remove gift items (if any)
        const cart = await getCartFresh();
        await removeGiftLines(cart);

        // 2) Clear ALL discounts from cart
        await cartUpdate({ discount: "" });

        // 3) Refresh any theme listeners
        document.dispatchEvent(new CustomEvent("cart:build"));
      } catch (e) {
        console.warn("Purge error", e);
      }
    }

    // Keep popup/buttons in sync
    function checkCartAndPopup() {
      getCartFresh().then(cart => {
        const subtotal = cart.total_price / 100;
        const giftInCart = cart.items.some(item =>
          giftVariantIds.includes(parseInt(item.variant_id, 10))
        );

        if (giftInCart) {
          disableAllButtons();
        } else {
          enableAllButtons();
          // (Optional) your original condition to show popup if needed:
          // const hasGiftCode = cart.discount_codes?.some(d => d.code?.toLowerCase() === giftCode.toLowerCase()) || false;
          // if (subtotal >= 100 && hasGiftCode) { showPopup(); } else { hidePopup(); }
          hidePopup(); // keep closed unless you re-enable logic above
        }
      });
    }

    // Initial runs
    checkCartAndPopup();
    purgeGiftsAndDiscountIfNotCheckout();

    // Handle BFCache/back button restores
    window.addEventListener("pageshow", function () {
      purgeGiftsAndDiscountIfNotCheckout();
      checkCartAndPopup();
    });

    // Watch for any cart-changing fetch and then re-run logic
    (function hookFetch() {
      const originalFetch = window.fetch;
      window.fetch = async function (...args) {
        const res = await originalFetch.apply(this, args);
        const url = args[0];

        if (typeof url === "string" && (
          url.includes("/cart/add.js") ||
          url.includes("/cart/change.js") ||
          url.includes("/cart/update.js") ||
          url.includes("/cart/clear.js")
        )) {
          setTimeout(() => {
            purgeGiftsAndDiscountIfNotCheckout();
            checkCartAndPopup();
          }, 300);
        }
        return res;
      };
    })();

    // ---------- PICK ME: add gift, apply discount, go to checkout ----------
    document.querySelectorAll(".gift-btn").forEach(button => {
      button.addEventListener("click", async function () {
        try {
          const giftItem = this.closest(".gift-item");
          const select = giftItem.querySelector(".gift-variant-selector");
          const variantId = parseInt(select.value, 10);

          const cart = await getCartFresh();
          const alreadyHasGift = cart.items.some(item =>
            giftVariantIds.includes(parseInt(item.variant_id, 10))
          );
          const subtotal = cart.total_price / 100;

          if (alreadyHasGift) {
            alert("🚫 Only one free gift is allowed per order.");
            disableAllButtons();
            hidePopup();
            return;
          }

          if (subtotal < 100) {
            alert("🚫 You are no longer eligible for the gift.");
            hidePopup();
            return;
          }

          // 1) Add gift line
          await fetch(`${root}cart/add.js`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              items: [{
                id: variantId,
                quantity: 1,
                properties: { source: "Free Gift Promo" }
              }]
            })
          });

          // 2) Apply discount to the CART (not via /discount redirect)
          await cartUpdate({ discount: giftCode });

          // 3) Go straight to checkout
          window.location.href = `${root}checkout`;
        } catch (e) {
          console.error("Gift add/apply error", e);
        }
      });
    });

    // ---------- Existing “gift already in cart” popup ----------
    // (unchanged from your snippet; keep if you still want it)
    const giftPopup = document.createElement('div');
    giftPopup.id = 'gift-popup';
    giftPopup.style.cssText = `
      position: fixed; top: 20px; right: 20px; max-width: 300px;
      background: #ff7800; color: #333; padding: 15px 20px; border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-size: 14px; z-index: 9999; display: none;
    `;
    giftPopup.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center;">
        <span>This gift item is already in your cart. Please complete checkout before adding it again.</span>
        <button id="gift-popup-close" style="background:none;border:none;font-size:18px;cursor:pointer;margin-left:15px;">&times;</button>
      </div>
    `;
    document.body.appendChild(giftPopup);
    document.getElementById('gift-popup-close')?.addEventListener('click', () => { giftPopup.style.display = 'none'; });
    function showGiftPopup() { giftPopup.style.display = 'block'; setTimeout(() => giftPopup.style.display = 'none', 10000); }

    // Block manual add of the gift product
    document.querySelectorAll('form[action^="/cart/add"]').forEach(form => {
      form.addEventListener('submit', function (e) {
        const formData = new FormData(this);
        const variantId = parseInt(formData.get("id"), 10);

        if (giftVariantIds.includes(variantId)) {
          e.preventDefault();
          getCartFresh().then(cart => {
            const giftInCart = cart.items.some(item => giftVariantIds.includes(parseInt(item.variant_id, 10)));
            if (giftInCart) { showGiftPopup(); return; }
            this.submit();
          });
        }
      });
    });

    // Variant selector image swap
    document.querySelectorAll(".gift-variant-selector").forEach(function (selectBox) {
      selectBox.addEventListener("change", function () {
        const selectedOption = this.options[this.selectedIndex];
        const imageUrl = selectedOption?.dataset?.image;
        const wrapper = this.closest(".gift-item");
        const imageEl = wrapper?.querySelector(".gift-variant-image");
        if (imageEl && imageUrl) imageEl.src = imageUrl;
      });
    });

    // Optional close for your original popup element (if present)
    document.getElementById("close-popup")?.addEventListener("click", hidePopup);
  });
</script>
