<div class="collection-header-wrapper banner-section page-content">
  <div class="page-width">
    <div class="breadcrumbs-container flex-grid">
      {%- render 'breadcrumbs' -%}
    </div>
    <header class="section-header">
      <h1 class="section-content__heading h1" style="color: {{ block.settings.title_color }}">{{ collection.title | escape }}</h1>

      {%- if collection.description != blank -%}
        <div class="section-content__text rte">
          {{ collection.description }}
        </div>
      {%- endif -%}
    </header>
    {% if block.settings.custom_filter_1 != blank or block.settings.custom_filter_2 != blank or block.settings.custom_filter_3 != blank %}
      <div class="custom-filter__wrapper">
        {% if block.settings.custom_filter_1 != blank %}
          <a class="ss__list__link btn btn--primary" href="{{ block.settings.custom_filter_1 }}">{{ block.settings.custom_filter_1_text }}</a>
        {% endif %}
        {% if block.settings.custom_filter_2 != blank %}
          <a class="ss__list__link btn btn--primary" href="{{ block.settings.custom_filter_2 }}">{{ block.settings.custom_filter_2_text }}</a>
        {% endif %}
        {% if block.settings.custom_filter_3 != blank %}
          <a class="ss__list__link btn btn--primary" href="{{ block.settings.custom_filter_3 }}">{{ block.settings.custom_filter_3_text }}</a>
        {% endif %}
      </div>
    {% endif %}
    {% if block.settings.filter_menu != blank %}
      {% assign filter = linklists[block.settings.filter_menu] %}
      <div class="filter-menu">
        {% if block.settings.filter_title %}
          <p class="filter-title">{{ block.settings.filter_title }}:</p>
        {% endif %}
    
        <!-- Mobile dropdown -->
        <select class="filter-select" onchange="if (this.value) window.location.href=this.value;">
          <option value="">{{ block.settings.filter_title | default: 'Choose an option' }}</option>
          {% for link in filter.links %}
            <option value="{{ link.url }}">{{ link.title }}</option>
          {% endfor %}
        </select>
    
        <!-- Desktop inline links -->
        <div class="filter-inline">
          {% for link in filter.links %}
            <a href="{{ link.url }}">{{ link.title }}</a>
          {% endfor %}
        </div>
      </div>
    {% endif %}
  </div>
</div>
<script>
  (function () {
    const maxWords = 19;
    const blocks = document.querySelectorAll(".section-content__text");

    blocks.forEach(block => {
      const tempDiv = document.createElement("div");
      tempDiv.innerHTML = block.innerHTML;

      const preservedNodes = [];

      function collectTextNodes(node) {
        node.childNodes.forEach(child => {
          if (child.nodeType === Node.TEXT_NODE) {
            preservedNodes.push({ type: "text", content: child.textContent });
          } else if (child.nodeType === Node.ELEMENT_NODE && child.tagName === "A") {
            preservedNodes.push({ type: "link", href: child.getAttribute("href"), content: child.textContent });
          } else if (child.nodeType === Node.ELEMENT_NODE) {
            collectTextNodes(child); // Recurse into other tags (span, strong, etc.)
          }
        });
      }

      collectTextNodes(tempDiv);

      let wordCount = 0;
      let shortHTML = "";
      let fullHTML = "";
      let reachedLimit = false;

      preservedNodes.forEach(node => {
        const words = node.content.trim().split(/\s+/).filter(Boolean);
        if (words.length === 0) return;

        let available = maxWords - wordCount;

        if (available <= 0) {
          if (node.type === "text") {
            fullHTML += " " + node.content.trim();
          } else if (node.type === "link") {
            fullHTML += ` <a href="${node.href}">${node.content.trim()}</a>`;
          }
          return;
        }

        const useWords = words.slice(0, available);
        const remainWords = words.slice(available);

        if (node.type === "text") {
          shortHTML += " " + useWords.join(" ");
          if (remainWords.length > 0) {
            fullHTML += " " + remainWords.join(" ");
          }
        } else if (node.type === "link") {
          shortHTML += ` <a href="${node.href}">${useWords.join(" ")}</a>`;
          if (remainWords.length > 0) {
            fullHTML += ` <a href="${node.href}">${remainWords.join(" ")}</a>`;
          }
        }

        wordCount += useWords.length;
      });

      if (wordCount < maxWords || !fullHTML.trim()) return;

      // Trim both sections
      shortHTML = shortHTML.trim();
      fullHTML = fullHTML.trim();

      // Replace all content inside the block
      block.innerHTML = "";

      const shortSpan = document.createElement("span");
      shortSpan.innerHTML = shortHTML;

      const dotsSpan = document.createElement("span");
      dotsSpan.textContent = "... ";

      const fullSpan = document.createElement("span");
      fullSpan.innerHTML = fullHTML;
      fullSpan.style.display = "none";
      fullSpan.className = "hidden-content";

      const toggleLink = document.createElement("a");
      toggleLink.href = "#";
      toggleLink.className = "read-more-toggle";
      toggleLink.textContent = "Read more";

      toggleLink.addEventListener("click", function (e) {
        e.preventDefault();
        const isExpanded = fullSpan.style.display === "inline";
        fullSpan.style.display = isExpanded ? "none" : "inline";
        dotsSpan.style.display = isExpanded ? "inline" : "none";
        toggleLink.textContent = isExpanded ? " Read more" : " Read less";
      });

      block.appendChild(shortSpan);
      block.appendChild(dotsSpan);
      block.appendChild(fullSpan);
      block.appendChild(toggleLink);
    });
  })();
</script>