<div class="collection-header-wrapper banner-section page-content">
  <div class="page-width">
    <div class="breadcrumbs-container flex-grid">
      {%- render 'breadcrumbs' -%}
    </div>
    <header class="section-header">
      <h1 class="section-content__heading h1" style="color: {{ block.settings.title_color }}">{{ collection.title | escape }}</h1>

      {%- if collection.description != blank -%}
        <div class="section-content__text rte">
          {{ collection.description }}
        </div>
      {%- endif -%}
    </header>
    {% if block.settings.custom_filter_1 != blank or block.settings.custom_filter_2 != blank or block.settings.custom_filter_3 != blank %}
      <div class="custom-filter__wrapper">
        {% if block.settings.custom_filter_1 != blank %}
          <a class="ss__list__link btn btn--primary" href="{{ block.settings.custom_filter_1 }}">{{ block.settings.custom_filter_1_text }}</a>
        {% endif %}
        {% if block.settings.custom_filter_2 != blank %}
          <a class="ss__list__link btn btn--primary" href="{{ block.settings.custom_filter_2 }}">{{ block.settings.custom_filter_2_text }}</a>
        {% endif %}
        {% if block.settings.custom_filter_3 != blank %}
          <a class="ss__list__link btn btn--primary" href="{{ block.settings.custom_filter_3 }}">{{ block.settings.custom_filter_3_text }}</a>
        {% endif %}
      </div>
    {% endif %}
    {% if block.settings.filter_menu != blank %}
      {% assign filter = linklists[block.settings.filter_menu] %}
      <div class="filter-menu">
        {% if block.settings.filter_title %}
          <p class="filter-title">{{ block.settings.filter_title }}:</p>
        {% endif %}
    
        <!-- Mobile dropdown -->
        <select class="filter-select" onchange="if (this.value) window.location.href=this.value;">
          <option value="">{{ block.settings.filter_title | default: 'Choose an option' }}</option>
          {% for link in filter.links %}
            <option value="{{ link.url }}">{{ link.title }}</option>
          {% endfor %}
        </select>
    
        <!-- Desktop inline links -->
        <div class="filter-inline">
          {% for link in filter.links %}
            <a href="{{ link.url }}">{{ link.title }}</a>
          {% endfor %}
        </div>
      </div>
    {% endif %}
  </div>
</div>
<script>
  (function () {
  const maxWords = 17;
  const blocks = document.querySelectorAll(".section-content__text");

  blocks.forEach(block => {
    const parser = document.createElement("div");
    parser.innerHTML = block.innerHTML;

    let wordCount = 0;
    let limitReached = false;

    const shortFragment = document.createDocumentFragment();
    const remainingFragment = document.createDocumentFragment();

    function processNode(node) {
      if (limitReached) {
        remainingFragment.appendChild(node.cloneNode(true));
        return;
      }

      if (node.nodeType === Node.TEXT_NODE) {
        const words = node.textContent.trim().split(/\s+/).filter(Boolean);

        if (words.length === 0) {
          shortFragment.appendChild(document.createTextNode(node.textContent));
          return;
        }

        const remaining = maxWords - wordCount;

        if (words.length <= remaining) {
          wordCount += words.length;
          shortFragment.appendChild(document.createTextNode(node.textContent));
        } else {
          const shortText = words.slice(0, remaining).join(" ");
          const remainingText = words.slice(remaining).join(" ");

          shortFragment.appendChild(document.createTextNode(shortText + " "));
          remainingFragment.appendChild(document.createTextNode(remainingText));
          wordCount += remaining;
          limitReached = true;
        }

        return;
      }

      if (node.nodeType === Node.ELEMENT_NODE) {
        const shortClone = node.cloneNode(false);
        const remainingClone = node.cloneNode(false);

        node.childNodes.forEach(child => {
          const beforeShort = shortFragment.childNodes.length;
          const beforeRemaining = remainingFragment.childNodes.length;

          const savedWordCount = wordCount;
          const savedLimit = limitReached;

          let shortTemp = document.createDocumentFragment();
          const remainingTemp = document.createDocumentFragment();

          const originalShortFragment = shortFragment;
          const originalRemainingFragment = remainingFragment;

          // Temporarily redirect
          shortFragment = shortTemp;
          remainingFragment = remainingTemp;

          processNode(child);

          // Restore
          const newShort = shortTemp.cloneNode(true);
          const newRemaining = remainingTemp.cloneNode(true);
          shortFragment = originalShortFragment;
          remainingFragment = originalRemainingFragment;

          if (newShort.childNodes.length) {
            newShort.childNodes.forEach(n => shortClone.appendChild(n));
          }
          if (newRemaining.childNodes.length) {
            newRemaining.childNodes.forEach(n => remainingClone.appendChild(n));
          }
        });

        if (shortClone.childNodes.length) shortFragment.appendChild(shortClone);
        if (remainingClone.childNodes.length) remainingFragment.appendChild(remainingClone);
      }
    }

    parser.childNodes.forEach(child => processNode(child));

    if (wordCount <= maxWords && remainingFragment.childNodes.length === 0) return; // No need for toggle

    // Clear and rebuild the block
    block.innerHTML = "";

    const shortWrapper = document.createElement("span");
    shortWrapper.appendChild(shortFragment);

    const dots = document.createElement("span");
    dots.textContent = "... ";

    const remainingWrapper = document.createElement("span");
    remainingWrapper.appendChild(remainingFragment);
    remainingWrapper.style.display = "none";

    const toggleLink = document.createElement("a");
    toggleLink.href = "#";
    toggleLink.className = "read-more-toggle";
    toggleLink.textContent = "Read more";

    toggleLink.addEventListener("click", function (e) {
      e.preventDefault();
      const expanded = remainingWrapper.style.display === "inline";
      remainingWrapper.style.display = expanded ? "none" : "inline";
      dots.style.display = expanded ? "inline" : "none";
      toggleLink.textContent = expanded ? " Read more" : " Read less";

      // Toggle a class on .section-content__text
      block.classList.toggle("expanded", !expanded);
    });

    block.appendChild(shortWrapper);
    block.appendChild(dots);
    block.appendChild(remainingWrapper);
    block.appendChild(toggleLink);
  });
})();
</script>